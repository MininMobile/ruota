dynamic Map :: {
	contents := [];

	index(key) => v from {
		i in contents ->> {
			i.key == key then {
				v &= i.value;
				return;
			};
		};
		contents push new Link(key);
		v &= (contents[end]).value;
	};

	getKeys() => keys_m from {
		keys_m = [];
		i in contents ->> { keys_m push i.key };
	};

	getValues() => values from {
		values = [];
		i in contents ->> { values push i.value };
	};

	containsKey(key) => b from {
		i in contents ->> {
			i.key == key then {
				b = true;
				return;
			};
		};
		b = false;
	};

	containsValue(value) => b from {
		i in contents ->> {
			i.value == value then {
				b = true;
				return;
			};
		};
		b = false;
	};

	iterator() => { contents; };

	size() => { len contents; };

	string() => s from {
		s = "[ ";
		e in contents ->> {
			s ..= e .. " ";
		};
		s ..= "]";
	};

	invert() => nm from {
		nm = new Map;
		e in contents ->> {
			nm[e.value] = e.key;
		};
	};

	equals(m) => b from {
		b = true;
		len m != size() then {
			b = false;
			return;
		};
		i in m ->> {
			!containsKey(i.key) then {
				b = false;
				break;
			};
			index(i.key) != i.value then {
				b = false;
				break;
			};
		};
	};

	dynamic Link :: {
		key := null;
		value := null;
		init(key, value) => {
			self.key = key;
			self.value = value;
		};
		string() => {
			key .. "=" .. value;
		};
	};
};