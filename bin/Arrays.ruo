static Arrays :: {
	# Sorts an array using quicksort algorithm
	# A comparator lambda may be specified as the second argument
	sort(a, comp = (x, y) -> { x < y }) => n_a from {
		n_a = a;
		len a < 2 then return;
		lower := [];
		upper := [];
		pivot := Random.int(len a - 1);
		i in [0 : len a] ->> {
			i != pivot then {
				e := a[i];
				comp(e, a[pivot]) then {
					lower push e;
				} else {
					upper push e;
				};
			};
		};
		n_a = idem(lower, comp) ++ [ a[pivot] ] ++ idem(upper, comp);
	};

	contains(a, v) => b from {
		b = false;
		e in a ->> { 
			e == v then {
				b = true;
				return;
			};
		};
	};

	# Removes element from array 'a' at position 'pos'
	remove(a, pos) => n_a from {
		n_a = a;
		pos == 0 then {
			mov n_a;
		} else pos == len a - 1 then {
			pop n_a;
		} else {
			n_a = n_a[0 : pos, (pos + 1) : len n_a];
		};
	};

	# Removes elements of equivalent value to 'value'
	removeValue(a, value) => n_a from {
		n_a = [];
		e in a ->> {
			e != value then {
				n_a push e;
			};
		};
	};
};