static Strings :: {
	replace(s, a, b) => n_s from {
		i in s ->> {
			i == a then {
				i = b;
			};
		};
		n_s = s;
	};

	split(s, a = ' ', max = -1) => array from {
		array = [""];
		max == 0 then { array = [s]; return};
		i in [0 : len s] ->> {
			s[i] == a then {
				len array >= max && max != -1 then {
					array push str s[i + 1 : len s];
					return;
				};
				array push "";
			} else {
				array[end] ..= s[i];
			};
		};
	};

	remove(s, a) => n_s from {
		n_s = "";
		c in s ->> {
			c != a then n_s ..= c;
		};
	};

	join(array, a = "") => s from {
		s = array[0];
		i in [1 : len array] ->> {
			s ..= a .. array[i];
		};
	};

	find(s, pat) => index from {
		index = -1;
		i in [0 :> len s - len pat] ->> {
			str s[i : i + len pat] == pat then {
				index = i;
				return;
			};
		};
	};

	findAll(s, pat) => indices from {
		indices = [];
		i in [0 :> len s - len pat] ->> {
			str s[i : i + len pat] == pat then indices push i;
		};
	};

	toUpper(s) => {str (c in s ->> { c >= 'a' && c <= 'z' then c = (c - 'a') + 'A'  else c })};
	toLower(s) => {str (c in s ->> { c >= 'A' && c <= 'Z' then c = (c - 'A') + 'a'  else c })};
};