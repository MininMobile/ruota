{
	"For_Range": {
		"prefix": "for",
		"body": [
			"i in [${1:start} ${2|:,:>|} ${3:end}] ->> {",
				"\t$0",
			"};"
		],
		"description": "Loop through range"
	},
	"For_Array": {
		"prefix": "for:a",
		"body": [
			"i in ${1:array} ->> {",
				"\t$0",
			"};"
		],
		"description": "Loop through array"
	},

	"Function": {
		"prefix": "function",
		"body": [
			"${1:name}(${2:params}) => {",
				"\t$0",
			"};"
		],
		"description": "Defines a function with names and parameters"
	},
	"Function_Returns": {
		"prefix": "function:r",
		"body": [
			"${1:name}(${2:params}) => ${3:returns} from {",
				"\t$0",
			"};"
		],
		"description": "Defines a function that returns a variable"
	},

	"Load": {
		"prefix": "load",
		"body": [
			"load \"${1|Arrays,Strings,Winsock,System,Map,LinkedList|}\";"
		],
		"description": "Imports a library thats adds functionality to Ruota"
	},

	"Object": {
		"prefix": "object",
		"body": [
			"${1|static,dynamic,virtual} ${2:object} :: {",
				"\t$0",
			"};"
		],
		"description": "Defines an object"
	},
	"Object_Inherits": {
		"prefix": "object:i",
		"body": [
			"${1|static,dynamic} ${2:object} :: ${3:inherit} +> {",
				"\t$0",
			"};"
		],
		"description": "Defines an object that inherits from a virtual object"
	},

	"Variable": {
		"prefix": "var",
		"body": [
			"${1:variable} := $0"
		],
		"description": "Define a new variable"
	},
	"Variable_Reassign": {
		"prefix": "var:r",
		"body": [
			"${1:variable} = $0"
		],
		"description": "Re-assign the value of a variable"
	},

	"Print": {
		"prefix": "p",
		"body": [
			"print(${1:text})"
		],
		"description": "Logs given text to output console"
	},
	"Printl": {
		"prefix": "pl",
		"body": [
			"printl(${1:text})"
		],
		"description": "Logs given text to output console followed by a newline character"
	},
	"Eval": {
		"prefix": "eval",
		"body": [
			"eval(${1:code})"
		],
		"description": "Evaluate string as Ruota code"
	},

	"Strings_Replace": {
		"prefix": "Strings.replace",
		"body": [
			"Strings.replace(${1:string}, ${2:a}, ${3:b})"
		],
		"description": "(Returns String) Replace all instances of char a with char b within the given string"
	},
	"Strings_Split": {
		"prefix": "Strings.split",
		"body": [
			"Strings.split(${1:string}, ${2:char}, ${3:max})"
		],
		"description": "(Returns Array) Splits a given string by a given char, returning an array of all substrings created by the split, up to a given maximum splits. If the max is -1, then the splits are unlimited"
	},
	"Strings_Remove": {
		"prefix": "Strings.remove",
		"body": [
			"Strings.remove(${1:string}, ${2:char})"
		],
		"description": "(Returns String) Removes all instances of a given char"
	},
	"Strings_Join": {
		"prefix": "Strings.join",
		"body": [
			"Strings.join(${1:array}, ${2:char})"
		],
		"description": "(Returns String) Joins the values of an array into a single string, delineated by a given char"
	},
	"Strings_Find": {
		"prefix": "Strings.find",
		"body": [
			"Strings.find(${1:string}, ${2:pattern})"
		],
		"description": "(Returns Number) Searches across a string for the first instance of a given pattern, returning the index of the first char in that match. If no match is found, then the function returns -1"
	},
	"Strings_FindAll": {
		"prefix": "Strings.findAll",
		"body": [
			"Strings.findAll(${1:string}, ${2:pattern})"
		],
		"description": "(Returns String[]) Searches across a string for all instances of a given pattern, returning the indices of the first char in those matches. If no match is found, then the function returns an empty array"
	},
	"Strings_ToUpper": {
		"prefix": "Strings.toUpper",
		"body": [
			"Strings.toUpper(${1:string})"
		],
		"description": "(Returns String) Converts a string to uppercase"
	},
	"Strings_ToLower": {
		"prefix": "Strings.toLower",
		"body": [
			"Strings.toLower(${1:string})"
		],
		"description": "(Returns String) Converts a string to lowercase"
	},

	"Arrays_Sort": {
		"prefix": "Arrays.sort",
		"body": [
			"Arrays.sort(${1:array}, ${2:lambda})"
		],
		"description": "(Returns Any[]) Sorts an array based on a given comparator function using the quicksort algorithm"
	},
	"Arrays_Contains": {
		"prefix": "Arrays.contains",
		"body": [
			"Arrays.contains(${1:array}, ${2:any})"
		],
		"description": "(Returns Number) Returns 1 if the array contains the given value, returns 0 otherwise"
	},
	"Arrays_Remove": {
		"prefix": "Arrays.remove",
		"body": [
			"Arrays.remove(${1:array}, ${2:index})"
		],
		"description": "(Returns Any[]) Removes the value from an array by the given index"
	},
	"Arrays_RemoveValue": {
		"prefix": "Arrays.removeValue",
		"body": [
			"Arrays.removeValue(${1:array}, ${2:value})"
		],
		"description": "(Returns Any[]) Removes the given values from an array"
	},

	"Winsock_Static": {
		"prefix": "Winsock.static",
		"body": [
			"Winsock.static()"
		],
		"description": "(Returns Void) Initiates the Winsock driver, must be declared before using any other function"
	},
	"Winsock_CreateSocket": {
		"prefix": "Winsock.createSocket",
		"body": [
			"Winsock.createSocket()"
		],
		"description": "(Returns Object:Winsock.Socket) Creates a new Socket object"
	},
	"Winsock_GetAddresses": {
		"prefix": "Winsock.getAddresses",
		"body": [
			"Winsock.getAddresses(${1:url})"
		],
		"description": "(Returns Any[]) Returns the IP addresses of a corresponding URL"
	},

	"Winsock_Socket_ptr": {
		"prefix": "Winsock.Socket.ptr",
		"body": [
			"${1:socket}.ptr"
		],
		"description": "(Pointer) Pointer toward the Winsock object"
	},
	"Winsock_Socket_Init": {
		"prefix": "Winsock.Socket.init",
		"body": [
			"${1:socket}.init(${2:ptr})"
		],
		"description": "(Returns Constructor) Constructor for the Socket object"
	},
	"Winsock_Socket_Connect": {
		"prefix": "Winsock.Socket.Connect",
		"body": [
			"${1:socket}.connect(${2:address}, ${3:port})"
		],
		"description": "(Returns Void) Connects the socket to a given address through a given port. If the address is a URL, it selects the URL's corresponding IP address"
	},
	"Winsock_Socket_Send": {
		"prefix": "Winsock.Socket.send",
		"body": [
			"${1:socket}.send(${2:data})"
		],
		"description": "(Returns Void) Sends data through the socket, automatically converted into a string"
	},
	"Winsock_Socket_Receive": {
		"prefix": "Winsock.Socket.receive",
		"body": [
			"${1:socket}.receive(${2:bytes}, ${3:callback})"
		],
		"description": "(Returns String) Receives data up to a given amount of bytes from server. If no callback is given, the function waits until it recieves a response and then returns the function. If a callback is given, it detaches the receiving function from the main thread and calls the callback when it receives the answer, passing the value to the callback"
	},
	"Winsock_Socket_Listen": {
		"prefix": "Winsock.Socket.listen",
		"body": [
			"${1:socket}.listen(${2:callback}, ${3:bytes}, ${4:blocking})"
		],
		"description": "(Returns Void) Listens continuously through the socket, referring to a callback function whenever it receives data. By default it operates on a separate thread, but can be specified to block the main thread while it receives. Only ends when the connection breaks"
	},
	"Winsock_Socket_Shutdown": {
		"prefix": "Winsock.Socket.shutdown",
		"body": [
			"${1:socket}.shutdown()"
		],
		"description": "(Returns Void) Shutsdown a Socket's connection"
	},

	"System_Path": {
		"prefix": "System.path",
		"body": [
			"System.path()"
		],
		"description": "(Returns String) Returns the current path of the running script"
	},
	"System_Dir": {
		"prefix": "System.dir",
		"body": [
			"System.dir(${1:path})"
		],
		"description": "(Returns String[]) Returns a string array of the files in the given path"
	},
	"System_Exists": {
		"prefix": "System.exists",
		"body": [
			"System.exists(${1:path})"
		],
		"description": "(Returns Number) Returns whether a particular folder of file exists"
	},
	"System_MKDir": {
		"prefix": "System.mkdir",
		"body": [
			"System.mkdir(${1:path})"
		],
		"description": "(Returns Void) Creates a folder at the given path"
	},
	"System_Remove": {
		"prefix": "System.remove",
		"body": [
			"System.remove(${1:path})"
		],
		"description": "(Returns Void) Removes a folder or file at a given path"
	},
	"System_Size": {
		"prefix": "System.size",
		"body": [
			"System.size(${1:path})"
		],
		"description": "(Returns Number) Returns the size in bytes of a file"
	},
	"System_Copy": {
		"prefix": "System.copy",
		"body": [
			"System.copy(${1:origin}, ${2:path})"
		],
		"description": "(Returns Void) Copies a file or folder to a new path"
	},
	"System_Rename": {
		"prefix": "System.rename",
		"body": [
			"System.rename(${1:origin}, ${2:path})"
		],
		"description": "(Returns Void) Renames a file or folder to a new path"
	},

	"Map": {
		"prefix": "map",
		"body": [
			"${1:variable} := new Map;"
		],
		"description": "Creates a new map"
	},
	"Map_contents": {
		"prefix": "Map.contents",
		"body": [
			"${1:map}.contents"
		],
		"description": "(Object:Map.Link[]) An array of Links that store the map's data"
	},
	"Map_Index": {
		"prefix": "Map.index",
		"body": [
			"${1:map}.index(${2:key})"
		],
		"description": "(Returns Any) Returns a mutable value assigned to a given key"
	},
	"Map_GetKeys": {
		"prefix": "Map.getKeys",
		"body": [
			"${1:map}.getKeys()"
		],
		"description": "(Returns String[]) Returns an array of the Map's keys"
	},
	"Map_GetValues": {
		"prefix": "Map.getValues",
		"body": [
			"${1:map}.getValues()"
		],
		"description": "(Returns String[]) Returns an array of the Map's values"
	},
	"Map_ContainsKey": {
		"prefix": "Map.containsKey",
		"body": [
			"${1:map}.containsKey(${2:key})"
		],
		"description": "(Returns Number) Returns 1 if the Map contains the given key, otherwise returns 0"
	},
	"Map_ContainsValue": {
		"prefix": "Map.containsValue",
		"body": [
			"${1:map}.containsValue(${2:value})"
		],
		"description": "(Returns Number) Returns 1 if the Map contains the given value, otherwise returns 0"
	},
	"Map_Iterator": {
		"prefix": "Map.iterator",
		"body": [
			"${1:map}.iterator()"
		],
		"description": "(Returns Any[]) Returns an array of the Map's data"
	},
	"Map_Size": {
		"prefix": "Map.size",
		"body": [
			"${1:map}.size()"
		],
		"description": "(Returns Number) Returns the current size of the Map"
	},
	"Map_String": {
		"prefix": "Map.string",
		"body": [
			"${1:map}.string()"
		],
		"description": "(Returns String) Returns a string representation of the Map"
	},
	"Map_Equals": {
		"prefix": "Map.equals",
		"body": [
			"${1:map}.equals(${2:map})"
		],
		"description": "(Returns Number) Returns 1 if the two maps are equivalent in values, otherwise 0"
	},
	"Map_Link_key": {
		"prefix": "Map.Link.key",
		"body": [
			"${1:link}.key"
		],
		"description": "(Any) Key for the Link"
	},
	"Map_Link_value": {
		"prefix": "Map.Link.value",
		"body": [
			"${1:link}.value"
		],
		"description": "(Any) Value for the Link"
	},
	"Map_Link_Init": {
		"prefix": "Map.Link.init",
		"body": [
			"${1:link}.init(${2:key}, ${3:value})"
		],
		"description": "(Returns Constructor) Constructor for the Link object, assigns itself a given key and value"
	},
	"Map_Link_String": {
		"prefix": "Map.Link.string",
		"body": [
			"${1:link}.string()"
		],
		"description": "(Returns String) Returns a string representation of the Link"
	},

	"LinkedList": {
		"prefix": "LinkedList",
		"body": [
			"${1:variable} := new LinkedList"
		],
		"description": "Creates a new LinkedList"
	},
	"LinkedList_head": {
		"prefix": "LinkedList.head",
		"body": [
			"${1:linkedlist}.head"
		],
		"description": "(Object:LinkedList.Link) The first Link in the LinkedList, null if List is empty"
	},
	"LinkedList_Add": {
		"prefix": "LinkedList.add",
		"body": [
			"${1:linkedlist}.add(${2:&element})"
		],
		"description": "(Returns Any) Adds a given element to the LinkedList"
	},
	"LinkedList_Iterator": {
		"prefix": "LinkedList.iterator",
		"body": [
			"${1:linkedlist}.iterator()"
		],
		"description": "(Returns Any[]) (Inherited) Returns an array of the LinkedList's values"
	},
	"LinkedList_ToArray": {
		"prefix": "LinkedList.toArray",
		"body": [
			"${1:linkedlist}.toArray()"
		],
		"description": "(Returns Any[]) (Inherited) Returns an array of the LinkedList's values"
	},
	"LinkedList_Equals": {
		"prefix": "LinkedList.equals",
		"body": [
			"${1:linkedlist}.equals(${2:linkedlist})"
		],
		"description": "(Returns Number) (Inherited) Checks the LinkedList for equality with the given List"
	},
	"LinkedList_Index": {
		"prefix": "LinkedList.index",
		"body": [
			"${1:linkedlist}.index(${2:position})"
		],
		"description": "(Returns Any) Returns the element at a given position"
	},
	"LinkedList_Remove": {
		"prefix": "LinkedList.remove",
		"body": [
			"${1:linkedlist}.remove(${2:position})"
		],
		"description": "(Returns Void) Removes the element at a given position"
	},
	"LinkedList_Size": {
		"prefix": "LinkedList.size",
		"body": [
			"${1:linkedlist}.size()"
		],
		"description": "(Returns Number) Returns the current size of the LinkedList"
	},
	"LinkedList_String": {
		"prefix": "LinkedList.string",
		"body": [
			"${1:linkedlist}.string()"
		],
		"description": "(Returns String) (Inherited) Returns a string representation of the LinkedList"
	},
	"LinkedList_Link_value": {
		"prefix": "LinkedList.Link.value",
		"body": [
			"${1:link}.value"
		],
		"description": "(Any) Value for the Link"
	},
	"LinkedList_Link_next": {
		"prefix": "LinkedList.Link.next",
		"body": [
			"${1:link}.next"
		],
		"description": "(Object:LinkedList.Link) Next Link in the List"
	},
	"LinkedList_Link_Init": {
		"prefix": "LinkedList.Link.init",
		"body": [
			"${1:link}.init(${2:value})"
		],
		"description": "(Returns Constructor) Constructor for the Link object, assigns itself a given value"
	},

	"File": {
		"prefix": "File",
		"body": [
			"${1:variable} := new File"
		],
		"description": "Creates new File"
	},
	"File_ptr": {
		"prefix": "File.ptr",
		"body": [
			"${1:file}.ptr"
		],
		"description": "(Pointer) The pointer object referencing the file stream"
	},
	"File_mode": {
		"prefix": "File.mode",
		"body": [
			"${1:file}.mode"
		],
		"description": "(Char) The mode in which the file has been openned, either read or write"
	},
	"File_Init": {
		"prefix": "File.init",
		"body": [
			"${1:file}.init(${2:filename}, ${3:mode})"
		],
		"description": "(Returns Constructor) Opens up a file in either read ('r'), write ('w'), or append ('a') mode"
	},
	"File_Write": {
		"prefix": "File.write",
		"body": [
			"${1:file}.write(${2:text})"
		],
		"description": "(Returns Void) Writes a line of given text to an openned file"
	},
	"File_ReadLine": {
		"prefix": "File.readLine",
		"body": [
			"${1:file}.readLine()"
		],
		"description": "(Returns String) Reads the subsequent line of text from the file, returns 'null' if the file has reached its end"
	},
	"File_ReadAll": {
		"prefix": "File.readAll",
		"body": [
			"${1:file}.readAll()"
		],
		"description": "(Returns String) Reads the entire contents of the file, returning them as a string"
	},
	"File_Read": {
		"prefix": "File.read",
		"body": [
			"${1:file}.read(${2:length})"
		],
		"description": "(Returns String) Reads the next chars of a given length"
	},
	"File_Close": {
		"prefix": "File.close",
		"body": [
			"${1:file}.close()"
		],
		"description": "(Returns Void) Closes the file, deallocating the pointer's memory"
	},

	"Math_pi": {
		"prefix": "Math.PI",
		"body": [
			"Math.pi"
		],
		"description": "(Returns Number) A number accurate to the 6th decimal of pi"
	},
	"Math_Floor": {
		"prefix": "Math.floor",
		"body": [
			"Math.floor(${1:x})"
		],
		"description": "(Returns Number) Rounds given number to lowest whole unit"
	},
	"Math_SQRT": {
		"prefix": "Math.sqrt",
		"body": [
			"Math.sqrt(${1:x})"
		],
		"description": "(Returns Number) Returns squareroot of given number"
	},
	"Math_Max": {
		"prefix": "Math.max",
		"body": [
			"Math.max(${1:&a}, ${2:&b})"
		],
		"description": "(Returns Number) Returns the larger of 2 given numbers"
	},
	"Math_Min": {
		"prefix": "Math.min",
		"body": [
			"Math.(${1:&a}, ${2:&b})"
		],
		"description": "(Returns Number) Returns the smaller of 2 given numbers"
	},
	"Math_Abs": {
		"prefix": "Math.abs",
		"body": [
			"Math.abs(${1:a})"
		],
		"description": "(Returns Number) Get the absolute value of given number"
	},
	"Math_Round": {
		"prefix": "Math.round",
		"body": [
			"Math.round(${1:a}, ${2:decimal})"
		],
		"description": "(Returns Number) Rounds given number to given decimal point"
	},
	"Math_Ceil": {
		"prefix": "Math.ceil",
		"body": [
			"Math.ceil(${1:a})"
		],
		"description": "(Returns Number) Rounds given number to highest whole unit"
	},
	"Math_Sum": {
		"prefix": "Math.sum",
		"body": [
			"Math.sum(${1:a})"
		],
		"description": "(Returns Number) Returns the sum of all numbers in given array"
	},
	"Math_Prod": {
		"prefix": "Math.prod",
		"body": [
			"Math.prod(${1:a})"
		],
		"description": "(Returns Number) Returns the product of given array"
	},
	"Math_Fact": {
		"prefix": "Math.fact",
		"body": [
			"Math.fact(${1:x})"
		],
		"description": "(Returns Number) Returns the factorial of given number"
	},
	"Math_Cos": {
		"prefix": "Math.cos",
		"body": [
			"Math.cos(${1:x}, {2:t})"
		],
		"description": "(Returns Number)"
	},
	"Math_Sin": {
		"prefix": "Math.sin",
		"body": [
			"Math.sin(${1:x}, {2:t})"
		],
		"description": "(Returns Number)"
	},
	"Math_Tan": {
		"prefix": "Math.tan",
		"body": [
			"Math.tan(${1:x}, {2:t})"
		],
		"description": "(Returns Number)"
	},
	"Math_Exp": {
		"prefix": "Math.exp",
		"body": [
			"Math.exp(${1:x}, {2:t})"
		],
		"description": "(Returns Number)"
	}
}