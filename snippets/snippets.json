{
	"For_Range": {
		"prefix": "for",
		"body": [
			"i in [${1:start} : ${2:end}] ->> {",
				"\t$0",
			"};"
		],
		"description": "Loop through range"
	},
	"For_Array": {
		"prefix": "for:a",
		"body": [
			"i in ${1:array} ->> {",
				"\t$0",
			"};"
		],
		"description": "Loop through array"
	},

	"Function": {
		"prefix": "function",
		"body": [
			"${1:name}(${2:params}) => {",
				"\t$0",
			"};"
		],
		"description": "Defines a function with names and parameters"
	},
	"Function_Returns": {
		"prefix": "function:r",
		"body": [
			"${1:name}(${2:params}) => ${3:returns} from {",
				"\t$0",
			"};"
		],
		"description": "Defines a function that returns a variable"
	},

	"Load": {
		"prefix": "load",
		"body": [
			"load \"${1|Arrays,Strings,Winsock,System,Map,LinkedList,File|}\";"
		],
		"description": "Imports a library thats adds functionality to Ruota"
	},

	"Strings_Replace": {
		"prefix": "Strings.replace",
		"body": [
			"Strings.replace(${1:string}, ${2:a}, ${3:b})"
		],
		"description": "(Returns String) Replace all instances of char a with char b within the given string"
	},
	"Strings_Split": {
		"prefix": "Strings.split",
		"body": [
			"Strings.split(${1:string}, ${2:char}, ${3:max})"
		],
		"description": "(Returns Array) Splits a given string by a given char, returning an array of all substrings created by the split, up to a given maximum splits. If the max is -1, then the splits are unlimited"
	},
	"Strings_Remove": {
		"prefix": "Strings.remove",
		"body": [
			"Strings.remove(${1:string}, ${2:char})"
		],
		"description": "(Returns String) Removes all instances of a given char"
	},
	"Strings_Join": {
		"prefix": "Strings.join",
		"body": [
			"Strings.join(${1:array}, ${2:char})"
		],
		"description": "(Returns String) Joins the values of an array into a single string, delineated by a given char"
	},
	"Strings_Find": {
		"prefix": "Strings.find",
		"body": [
			"Strings.find(${1:string}, ${2:pattern})"
		],
		"description": "(Returns Number) Searches across a string for the first instance of a given pattern, returning the index of the first char in that match. If no match is found, then the function returns -1"
	},
	"Strings_FindAll": {
		"prefix": "Strings.findAll",
		"body": [
			"Strings.findAll(${1:string}, ${2:pattern})"
		],
		"description": "(Returns String[]) Searches across a string for all instances of a given pattern, returning the indices of the first char in those matches. If no match is found, then the function returns an empty array"
	},
	"Strings_ToUpper": {
		"prefix": "Strings.toUpper",
		"body": [
			"Strings.toUpper(${1:string})"
		],
		"description": "(Returns String) Converts a string to uppercase"
	},
	"Strings_ToLower": {
		"prefix": "Strings.toLower",
		"body": [
			"Strings.toLower(${1:string})"
		],
		"description": "(Returns String) Converts a string to lowercase"
	},

	"Arrays_Sort": {
		"prefix": "Arrays.sort",
		"body": [
			"Arrays.sort(${1:array}, ${2:lambda})"
		],
		"description": "(Returns Any[]) Sorts an array based on a given comparator function using the quicksort algorithm"
	},
	"Arrays_Contains": {
		"prefix": "Arrays.contains",
		"body": [
			"Arrays.contains(${1:array}, ${2:any})"
		],
		"description": "(Returns Number) Returns 1 if the array contains the given value, returns 0 otherwise"
	},
	"Arrays_Remove": {
		"prefix": "Arrays.remove",
		"body": [
			"Arrays.remove(${1:array}, ${2:index})"
		],
		"description": "(Returns Any[]) Removes the value from an array by the given index"
	},
	"Arrays_RemoveValue": {
		"prefix": "Arrays.removeValue",
		"body": [
			"Arrays.removeValue(${1:array}, ${2:value})"
		],
		"description": "(Returns Any[]) Removes the given values from an array"
	},

	"Winsock_Static": {
		"prefix": "Winsock.static",
		"body": [
			"Winsock.static()"
		],
		"description": "(Returns Void) Initiates the Winsock driver, must be declared before using any other function"
	},
	"Winsock_CreateSocket": {
		"prefix": "Winsock.createSocket",
		"body": [
			"Winsock.createSocket()"
		],
		"description": "(Returns Object:Winsock.Socket) Creates a new Socket object"
	},
	"Winsock_GetAddresses": {
		"prefix": "Winsock.getAddresses",
		"body": [
			"Winsock.getAddresses(${1:url})"
		],
		"description": "(Returns Any[]) Returns the IP addresses of a corresponding URL"
	},

	"Winsock_Socket_ptr": {
		"prefix": "Winsock.Socket.ptr",
		"body": [
			"${1:socket}.ptr"
		],
		"description": "(Pointer) Pointer toward the Winsock object"
	},
	"Winsock_Socket_Init": {
		"prefix": "Winsock.Socket.init",
		"body": [
			"${1:socket}.init(${2:ptr})"
		],
		"description": "(Returns Constructor) Constructor for the Socket object"
	},
	"Winsock_Socket_Connect": {
		"prefix": "Winsock.Socket.Connect",
		"body": [
			"${1:socket}.connect(${2:address}, ${3:port})"
		],
		"description": "(Returns Void) Connects the socket to a given address through a given port. If the address is a URL, it selects the URL's corresponding IP address"
	},
	"Winsock_Socket_Send": {
		"prefix": "Winsock.Socket.send",
		"body": [
			"${1:socket}.send(${2:data})"
		],
		"description": "(Returns Void) Sends data through the socket, automatically converted into a string"
	},
	"Winsock_Socket_Receive": {
		"prefix": "Winsock.Socket.receive",
		"body": [
			"${1:socket}.receive(${2:bytes}, ${3:callback})"
		],
		"description": "(Returns String) Receives data up to a given amount of bytes from server. If no callback is given, the function waits until it recieves a response and then returns the function. If a callback is given, it detaches the receiving function from the main thread and calls the callback when it receives the answer, passing the value to the callback"
	},
	"Winsock_Socket_Listen": {
		"prefix": "Winsock.Socket.listen",
		"body": [
			"${1:socket}.listen(${2:callback}, ${3:bytes}, ${4:blocking})"
		],
		"description": "(Returns Void) Listens continuously through the socket, referring to a callback function whenever it receives data. By default it operates on a separate thread, but can be specified to block the main thread while it receives. Only ends when the connection breaks"
	},
	"Winsock_Socket_Shutdown": {
		"prefix": "Winsock.Socket.shutdown",
		"body": [
			"${1:socket}.shutdown()"
		],
		"description": "(Returns Void) Shutsdown a Socket's connection"
	}
}